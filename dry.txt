
58 files with changes
=====================

1) src/Validator/RegisteredUserValidator.php:27

    ---------- begin diff ----------
@@ @@

         $existingUser = $this->userRepository->findOneBy(['email' => $value]);

-        if ($existingUser === null) {
+        if (!$existingUser instanceof \App\Entity\User) {
             $this->context->buildViolation($constraint->message)
                 ->addViolation()
             ;
    ----------- end diff -----------

Applied rules:
 * FlipTypeControlToUseExclusiveTypeRector


2) src/Mailer/Mailer.php:22

    ---------- begin diff ----------
@@ @@
      */
     public function send(Email $email): void
     {
-        try {
-            $this->mailer->send($email);
-        } catch (TransportExceptionInterface $e) {
-            throw $e;
-        }
+        $this->mailer->send($email);
     }
 }
    ----------- end diff -----------

Applied rules:
 * RemoveDeadTryCatchRector


3) src/Form/Type/ProductCustomType.php:28

    ---------- begin diff ----------
@@ @@
                 'mapped' => true,
                 'required' => false,
             ])
-            
+
             ->add('suggested_vin', TextType::class, [
                 'label' => 'label.suggested_vin',
                 'attr' => [
    ----------- end diff -----------

4) src/Entity/Product.php:27

    ---------- begin diff ----------
@@ @@
 #[ORM\Entity(repositoryClass: ProductRepository::class)]
 class Product
 {
+    public $orderDetail;
     use CreatedAtTrait;
     use ModifiedAtTrait;
     use SlugTrait;
@@ @@

     public function removeOrdersDetail(OrderDetail $orderDetail): self
     {
-        if ($this->orderDetail->removeElement($orderDetail)) {
-            // set the owning side to null (unless already changed)
-            if ($orderDetail->getProduct() === $this) {
-                $orderDetail->setProduct(null);
-            }
+        // set the owning side to null (unless already changed)
+        if ($this->orderDetail->removeElement($orderDetail) && $orderDetail->getProduct() === $this) {
+            $orderDetail->setProduct(null);
         }

         return $this;
@@ @@

     public function removeImage(Image $image): self
     {
-        if ($this->images->removeElement($image)) {
-            // set the owning side to null (unless already changed)
-            if ($image->getProduct() === $this) {
-                $image->setProduct(null);
-            }
+        // set the owning side to null (unless already changed)
+        if ($this->images->removeElement($image) && $image->getProduct() === $this) {
+            $image->setProduct(null);
         }

         return $this;
    ----------- end diff -----------

Applied rules:
 * CompleteDynamicPropertiesRector (https://3v4l.org/GL6II)
 * CombineIfRector


5) src/Entity/Order.php:88

    ---------- begin diff ----------
@@ @@

     public function removeOrderDetail(OrderDetail $orderDetail): self
     {
-        if ($this->orderDetail->removeElement($orderDetail)) {
-            // set the owning side to null (unless already changed)
-            if ($orderDetail->getOrder() === $this) {
-                $orderDetail->setOrder(null);
-            }
+        // set the owning side to null (unless already changed)
+        if ($this->orderDetail->removeElement($orderDetail) && $orderDetail->getOrder() === $this) {
+            $orderDetail->setOrder(null);
         }

         return $this;
    ----------- end diff -----------

Applied rules:
 * CombineIfRector


6) src/Entity/Category.php:101

    ---------- begin diff ----------
@@ @@

     public function removeCategory(self $category): self
     {
-        if ($this->category->removeElement($category)) {
-            // set the owning side to null (unless already changed)
-            if ($category->getParent() === $this) {
-                $category->setParent(null);
-            }
+        // set the owning side to null (unless already changed)
+        if ($this->category->removeElement($category) && $category->getParent() === $this) {
+            $category->setParent(null);
         }

         return $this;
@@ @@

     public function removeProduct(Product $product): self
     {
-        if ($this->product->removeElement($product)) {
-            // set the owning side to null (unless already changed)
-            if ($product->getCategory() === $this) {
-                $product->setCategory(null);
-            }
+        // set the owning side to null (unless already changed)
+        if ($this->product->removeElement($product) && $product->getCategory() === $this) {
+            $product->setCategory(null);
         }

         return $this;
    ----------- end diff -----------

Applied rules:
 * CombineIfRector


7) src/Entity/Account.php:105

    ---------- begin diff ----------
@@ @@

     public function removeProduct(Product $product): self
     {
-        if ($this->products->removeElement($product)) {
-            // set the owning side to null (unless already changed)
-            if ($product->getAccountId() === $this) {
-                $product->setAccountId(null);
-            }
+        // set the owning side to null (unless already changed)
+        if ($this->products->removeElement($product) && $product->getAccountId() === $this) {
+            $product->setAccountId(null);
         }

         return $this;
@@ @@

     public function removeThread(Thread $thread): self
     {
-        if ($this->threads->removeElement($thread)) {
-            // set the owning side to null (unless already changed)
-            if ($thread->getAccount() === $this) {
-                $thread->setAccount(null);
-            }
+        // set the owning side to null (unless already changed)
+        if ($this->threads->removeElement($thread) && $thread->getAccount() === $this) {
+            $thread->setAccount(null);
         }

         return $this;
@@ @@

     public function getIsSubscriptionActive(): ?bool
     {
-        return $this->isSubscriptionActive ? true : false;
+        return $this->isSubscriptionActive;
     }

 }
    ----------- end diff -----------

Applied rules:
 * CombineIfRector
 * UnnecessaryTernaryExpressionRector


8) src/DataFixtures/UserFixtures.php:13

    ---------- begin diff ----------
@@ @@

 final class UserFixtures extends Fixture implements DependentFixtureInterface
 {
+    public $transformer;
     public function __construct(UserTransformer $transformer)
     {
         $this->transformer = $transformer;
    ----------- end diff -----------

Applied rules:
 * CompleteDynamicPropertiesRector (https://3v4l.org/GL6II)


9) src/Entity/User.php:23

    ---------- begin diff ----------
@@ @@
 class User implements UserInterface, PasswordAuthenticatedUserInterface
 {

-//    use CreatedAtTrait;
+public $first_name;
+    public $type;
+    //    use CreatedAtTrait;
     use EntityIdTrait;

     /**
@@ @@
     #[ORM\OneToMany(mappedBy: 'user', targetEntity: Message::class)]
     private Collection $messages;

-    private ?string $role = '';
-
     #[ORM\Column(type: Types::BOOLEAN, length: 1, nullable: false, options: ['default' => 0])]
     private ?bool $isSubscriptionActive = null;

@@ @@
     public function setPassword(string $password): self
     {
         // $this->password = $password;
-        if (!is_null($password)) {
-            $this->password = $password;
-        }
+        $this->password = $password;
         return $this;
     }

@@ @@
     {
         $roles = $this->roles;
         // guarantees that a user always has at least one role for security
-        if (empty($roles)) {
+        if ($roles === []) {
             $roles[] = 'ROLE_ADMIN';
             $roles[] = 'ROLE_BUYER';
             $roles[] = 'ROLE_SELLER';
@@ @@

     public function isVerified(): bool
     {
-        return $this->emailVerifiedAt !== null;
+        return $this->emailVerifiedAt instanceof \DateTime;
     }

     public function getEmailVerifiedAt(): ?DateTime
@@ @@

     public function getIsAccount(): ?bool
     {
-        return $this->isAccount ? true : false;
+        return (bool) $this->isAccount;
     }

     public function setIsAccount(?bool $isAccount): self
@@ @@

     public function removeThread(Thread $thread): self
     {
-        if ($this->threads->removeElement($thread)) {
-            // set the owning side to null (unless already changed)
-            if ($thread->getUser() === $this) {
-                $thread->setUser(null);
-            }
+        // set the owning side to null (unless already changed)
+        if ($this->threads->removeElement($thread) && $thread->getUser() === $this) {
+            $thread->setUser(null);
         }

         return $this;
@@ @@

     public function removeMessage(Message $message): self
     {
-        if ($this->messages->removeElement($message)) {
-            // set the owning side to null (unless already changed)
-            if ($message->getUser() === $this) {
-                $message->setUser(null);
-            }
+        // set the owning side to null (unless already changed)
+        if ($this->messages->removeElement($message) && $message->getUser() === $this) {
+            $message->setUser(null);
         }

         return $this;
    ----------- end diff -----------

Applied rules:
 * CompleteDynamicPropertiesRector (https://3v4l.org/GL6II)
 * SimplifyEmptyCheckOnEmptyArrayRector
 * FlipTypeControlToUseExclusiveTypeRector
 * CombineIfRector
 * UnnecessaryTernaryExpressionRector
 * RemoveAlwaysTrueIfConditionRector
 * RemoveUnusedPrivatePropertyRector


10) src/Entity/Thread.php:129

    ---------- begin diff ----------
@@ @@

     public function removeMessage(Message $message): self
     {
-        if ($this->messages->removeElement($message)) {
-            // set the owning side to null (unless already changed)
-            if ($message->getThread() === $this) {
-                $message->setThread(null);
-            }
+        // set the owning side to null (unless already changed)
+        if ($this->messages->removeElement($message) && $message->getThread() === $this) {
+            $message->setThread(null);
         }

         return $this;
    ----------- end diff -----------

Applied rules:
 * CombineIfRector


11) src/Entity/Subscription.php:165

    ---------- begin diff ----------
@@ @@

     public function removeAccountId(Account $accountId): self
     {
-        if ($this->account_id->removeElement($accountId)) {
-            // set the owning side to null (unless already changed)
-            if ($accountId->getSubscription() === $this) {
-                $accountId->setSubscription(null);
-            }
+        // set the owning side to null (unless already changed)
+        if ($this->account_id->removeElement($accountId) && $accountId->getSubscription() === $this) {
+            $accountId->setSubscription(null);
         }

         return $this;
    ----------- end diff -----------

Applied rules:
 * CombineIfRector


12) src/Entity/ProductDetails.php:453

    ---------- begin diff ----------
@@ @@
     #[ORM\JoinColumn(nullable: false)]
     private Product $product;

-    public function __construct()
-    {
-    }
-
     public function getPossibleValues()
     {
         return $this->possible_values;
    ----------- end diff -----------

Applied rules:
 * RemoveEmptyClassMethodRector


13) src/Repository/ProductRepository.php:24

    ---------- begin diff ----------
@@ @@
 {

     private PaginatorInterface $paginator;
-    private Security $security;

     public function __construct(
         ManagerRegistry $registry,
         PaginatorInterface $paginator,
-        Security $security,
     ) {
         parent::__construct($registry, Product::class);
         $this->paginator = $paginator;
-        $this->security = $security;
     }

     public const NUM_ITEMS = 20;
@@ @@

     /**
      * @param $account
-     *
-     * @return array
      */
     public function findAllThreadsByAccount($account): array
     {
    ----------- end diff -----------

Applied rules:
 * RemoveUnusedConstructorParamRector
 * RemoveUselessReturnTagRector
 * RemoveUnusedPrivatePropertyRector
 * RenameClassRector


14) src/Repository/PageRepository.php:22

    ---------- begin diff ----------
@@ @@
  */
 final class PageRepository extends ServiceEntityRepository
 {
-    /**
-     * @var PaginatorInterface
-     */
     private PaginatorInterface $paginator;

     public function __construct(
@@ @@
         Request $request,
     ): PaginationInterface {
         $locale = 'en';
-        $publish = '1';

         $qb = $this->createQueryBuilder('p')
             ->where('p.locale = :locale')
    ----------- end diff -----------

Applied rules:
 * RemoveUnusedVariableAssignRector
 * RemoveUselessVarTagRector
 * RenameClassRector


15) src/Middleware/ThrottleRequests.php:23

    ---------- begin diff ----------
@@ @@
             $request->getClientIp() . $request->getPathInfo() . $request->getMethod()
         );

-        if ($limiter->consume(1)->isAccepted() === false) {
+        if (!$limiter->consume(1)->isAccepted()) {
             throw new TooManyRequestsHttpException();
         }
     }
    ----------- end diff -----------

Applied rules:
 * SimplifyBoolIdenticalTrueRector


16) src/Service/Admin/ProductTrimsService.php:14

    ---------- begin diff ----------
@@ @@
 final class ProductTrimsService extends AbstractService
 {
     private EntityManagerInterface $em;
-    private Slugger $slugger;

     public function __construct(
         CsrfTokenManagerInterface $tokenManager,
         RequestStack $requestStack,
         EntityManagerInterface $entityManager,
-        Slugger $slugger,
     ) {
         parent::__construct($tokenManager, $requestStack);
         $this->em = $entityManager;
-        $this->slugger = $slugger;
     }

     public function save(object $object): void
    ----------- end diff -----------

Applied rules:
 * RemoveUnusedConstructorParamRector
 * RemoveUnusedPrivatePropertyRector


17) src/Security/Voter/ProductVoter.php:14

    ---------- begin diff ----------
@@ @@
     public const EDIT = 'PRODUCT_EDIT';
     public const DELETE = 'PRODUCT_DELETE';

-    private Security $security;
+    private \Symfony\Bundle\SecurityBundle\Security $security;

-    public function __construct(Security $security)
+    public function __construct(\Symfony\Bundle\SecurityBundle\Security $security)
     {
         $this->security = $security;
     }
@@ @@
         if (!\in_array($attribute, [self::EDIT, self::DELETE], true)) {
             return false;
         }
-        if (!$product instanceof Product) {
-            return false;
-        }
+        return $product instanceof Product;

-        return true;
-
         // return in_array($attribute, [self::EDIT, self::DELETE]) && $product instanceof Product;
     }

@@ @@
         switch ($attribute) {
             case self::EDIT:
                 return $this->canEdit();
-                break;
             case self::DELETE:
                 return $this->canDelete();
-                break;
         }
     }
    ----------- end diff -----------

Applied rules:
 * SimplifyIfReturnBoolRector
 * RemoveUnreachableStatementRector
 * RenameClassRector


18) src/Security/UserChecker.php:15

    ---------- begin diff ----------
@@ @@
         if (!$user instanceof AppUser) {
             return;
         }
-        if (!$user->getEmailVerifiedAt()) {
+        if (!$user->getEmailVerifiedAt() instanceof \DateTime) {
             // the message passed to this exception is meant to be displayed to the user
             throw new CustomUserMessageAccountStatusException('message.verify_account');
         }
@@ @@
     public function checkPostAuth(UserInterface $user): void
     {
         if (!$user instanceof AppUser) {
-            return;
         }
     }
    ----------- end diff -----------

Applied rules:
 * FlipTypeControlToUseExclusiveTypeRector
 * ExplicitBoolCompareRector (https://www.reddit.com/r/PHP/comments/aqk01p/is_there_a_situation_in_which_if_countarray_0/)
 * RemoveLastReturnRector


19) src/Security/RegistrationFormAuthenticator.php:29

    ---------- begin diff ----------
@@ @@
     public function authenticate(Request $request): Passport
     {
         $formData = $request->request->all('registration_form');
-        $request->getSession()->set(Security::LAST_USERNAME, $formData['username']);
+        $request->getSession()->set(\Symfony\Component\Security\Http\SecurityRequestAttributes::LAST_USERNAME, $formData['username']);

         return new Passport(
             new UserBadge($formData['username']),
    ----------- end diff -----------

Applied rules:
 * RenameClassConstFetchRector


20) src/Repository/UserRepository.php:21

    ---------- begin diff ----------
@@ @@
  */
 class UserRepository extends ServiceEntityRepository
 {
-    /**
-     * @var PaginatorInterface
-     */
     private PaginatorInterface $paginator;

     public function __construct(
    ----------- end diff -----------

Applied rules:
 * RemoveUselessVarTagRector
 * RenameClassRector


21) src/Repository/ThreadRepository.php:48

    ---------- begin diff ----------
@@ @@
     {
         $thread = $this->getEntityManager()->getRepository(Thread::class)->find($id);

-        if (!$thread) {
+        if (!$thread instanceof \App\Entity\Thread) {
             throw $this->createNotFoundException('Thread not found');
         }

@@ @@
     {
         $thread = $this->getEntityManager()->getRepository(Thread::class)->find($id);

-        if (!$thread) {
+        if (!$thread instanceof \App\Entity\Thread) {
             throw $this->createNotFoundException('Thread not found');
         }
    ----------- end diff -----------

Applied rules:
 * FlipTypeControlToUseExclusiveTypeRector
 * ExplicitBoolCompareRector (https://www.reddit.com/r/PHP/comments/aqk01p/is_there_a_situation_in_which_if_countarray_0/)


22) src/Repository/ResettingRepository.php:13

    ---------- begin diff ----------
@@ @@
 {
     private UserTransformer $transformer;

-    private PaginatorInterface $paginator;
-
     public function __construct(
         ManagerRegistry $registry,
         UserTransformer $transformer,
    ----------- end diff -----------

Applied rules:
 * RemoveUnusedPrivatePropertyRector


23) src/Repository/ProductTrimsRepository.php:24

    ---------- begin diff ----------
@@ @@
 {

     private PaginatorInterface $paginator;
-    private Security $security;

     public function __construct(
         ManagerRegistry $registry,
         PaginatorInterface $paginator,
-        Security $security,
     ) {
         parent::__construct($registry, ProductTrims::class);
         $this->paginator = $paginator;
-        $this->security = $security;
     }

     public const NUM_ITEMS = 20;
@@ @@

     /**
      * @param $account
-     *
-     * @return array
      */
     public function findAllThreadsByAccount($account): array
     {
    ----------- end diff -----------

Applied rules:
 * RemoveUnusedConstructorParamRector
 * RemoveUselessReturnTagRector
 * RemoveUnusedPrivatePropertyRector
 * RenameClassRector


24) src/Utils/GeneralUtil.php:11

    ---------- begin diff ----------
@@ @@

 final class GeneralUtil implements GeneralUtilInterface
 {
+    /**
+     * @var \Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface
+     */
+    public $params;
     public function __construct(
-        private HttpClientInterface $carApiClient,
-        private CacheInterface $cache,
         ParameterBagInterface $params,
     ) {
         $this->params = $params;
    ----------- end diff -----------

Applied rules:
 * CompleteDynamicPropertiesRector (https://3v4l.org/GL6II)
 * RemoveUnusedPromotedPropertyRector
 * RemoveUselessVarTagRector
 * RenameClassRector


25) src/Twig/AppExtension.php:20

    ---------- begin diff ----------
@@ @@
     public function getFilters(): array
     {
         return [
-            new TwigFilter('page', [$this, 'showPageNumber']),
+            new TwigFilter('page', function ($number = 1) : string {
+                return $this->showPageNumber($number);
+            }),
         ];
     }
    ----------- end diff -----------

Applied rules:
 * CallableThisArrayToAnonymousFunctionRector (https://www.php.net/manual/en/language.types.callable.php#117260)


26) src/Transformer/RequestToArrayTransformer.php:9

    ---------- begin diff ----------
@@ @@
 {
     public function transform(Request $request): array
     {
-        $params = [];
-        $params['page'] = $request->query->getInt('page', 1);
-
-        return $params;
+        return ['page' => $request->query->getInt('page', 1)];
     }
 }
    ----------- end diff -----------

Applied rules:
 * InlineArrayReturnAssignRector


27) src/Service/URLService.php:8

    ---------- begin diff ----------
@@ @@

 final class URLService
 {
-    public function __construct(private RouterInterface $router)
-    {
-    }
-
-//    // Check slugs.
+    //    // Check slugs.
 //    public function isCanonical(Property $property, Request $request): bool
 //    {
 //        $citySlug = $request->attributes->get('citySlug', '');
@@ @@
     // Check referer host.
     public function isRefererFromCurrentHost(Request $request): bool
     {
-        if (preg_match('/' . $request->getHost() . '/', $request->server->getHeaders()['REFERER'] ?? '')) {
-            return true;
-        }
-
-        return false;
+        return (bool) preg_match('/' . $request->getHost() . '/', $request->server->getHeaders()['REFERER'] ?? '');
     }
 }
    ----------- end diff -----------

Applied rules:
 * SimplifyIfReturnBoolRector
 * RemoveEmptyClassMethodRector
 * RemoveUnusedPromotedPropertyRector


28) src/Service/StripeService.php:62

    ---------- begin diff ----------
@@ @@
             $user = $this->userRepository->findOneBy(['email' => $invoiceObj->customer_email]);
             $plan = $this->subscriptionRepository->findOneBy(['stripe_price_id' => $invoiceObj->lines->data[0]->price->id]);
             $account = $this->accountRepository->findOneBy(['primaryUser' => $user->getId()]);
-            if (!$account) {
+            if (!$account instanceof \App\Entity\Account) {
                 $account = new Account();
             }
             $account->setName($invoiceObj->customer_email);
@@ @@
             $user = $this->userRepository->findOneBy(['email' => $invoiceObj->customer_email]);
             $plan = $this->subscriptionRepository->findOneBy(['stripe_price_id' => $invoiceObj->lines->data[0]->price->id]);
             $account = $this->accountRepository->findOneBy(['primaryUser' => $user->getId()]);
-            if (!$account) {
+            if (!$account instanceof \App\Entity\Account) {
                 $account = new Account();
             }
             $account->setName($invoiceObj->customer_email);
@@ @@

     public function stripeCreateSession($success_url, $cancel_url, $stripeCustomerId, $priceId): Session
     {
-        Stripe::setApiKey($this->parameters->get('app.stripe.secret_key'));        
-        $stripeSession = Session::create(
+        Stripe::setApiKey($this->parameters->get('app.stripe.secret_key'));
+
+        return Session::create(
             [
                 'success_url'          => $success_url,
                 'cancel_url'           => $cancel_url,
@@ @@
                 ],
             ]
         );
-
-        return $stripeSession;
     }


@@ @@
     }


-    public function checkStripeSubscriptionActive(Security $security, AccountRepository $accountRepository, AccountUserRepository $accountUserRepository)
+    public function checkStripeSubscriptionActive(Security $security, AccountRepository $accountRepository, AccountUserRepository $accountUserRepository): bool|string
     {

         $user = $security->getUser();
-        if ($security->isGranted('ROLE_USER')===true && $user->getIsAccount()) {
+        if ($security->isGranted('ROLE_USER') && $user->getIsAccount()) {
             // get the account information the user is registered to
             $accountUser = $accountUserRepository->findOneBy(['user' => $user->getId()]);

             // get the account information
             // if accountUser is null then it means this user is a primary user and we can use the main $account
-            if ($accountUser) {
+            if ($accountUser instanceof \App\Entity\AccountUser) {
                 $account = $accountRepository->findOneBy(['id' => $accountUser->getAccount()]);
             } else {
                 $account = $accountRepository->findOneBy(['primaryUser' => $user->getId()]);
@@ @@
                 } else {
                     return true;
                 }
+            } elseif (!$account->getIsSubscriptionActive()) {
+                if (is_null($user->getStripeCustomerId())) {
+                    $stripeCustomerObj = $this->stripeCustomerCreated();
+                    $stripeCustomerId =  $stripeCustomerObj->id;
+                    $user->setStripeCustomerId($stripeCustomerId);                        
+                    $this->entityManagerInterface->persist($user);
+                    $this->entityManagerInterface->flush();
+                }
+                return "account";
             } else {
-                if (!$account->getIsSubscriptionActive()) {
-                    if (is_null($user->getStripeCustomerId())) {
-                        $stripeCustomerObj = $this->stripeCustomerCreated();
-                        $stripeCustomerId =  $stripeCustomerObj->id;
-                        $user->setStripeCustomerId($stripeCustomerId);                        
-                        $this->entityManagerInterface->persist($user);
-                        $this->entityManagerInterface->flush();
-                    }
-                    return "account";
-                } else {
-                    return true;
-                }
+                return true;
             }
         }
         return true;
    ----------- end diff -----------

Applied rules:
 * ReturnTypeFromStrictScalarReturnExprRector
 * SimplifyUselessVariableRector
 * FlipTypeControlToUseExclusiveTypeRector
 * SimplifyBoolIdenticalTrueRector
 * ExplicitBoolCompareRector (https://www.reddit.com/r/PHP/comments/aqk01p/is_there_a_situation_in_which_if_countarray_0/)
 * ShortenElseIfRector


29) src/Service/PictureService.php:69

    ---------- begin diff ----------
@@ @@

         $path = $this->params->get('images_directory') . $folder;

-        if (!file_exists($path . '/mini/')) {
-            if (!mkdir($concurrentDirectory = $path . '/mini/', 0o755, true)
-                && !is_dir($concurrentDirectory)
-            ) {
-                throw new RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
-            }
+        if (!file_exists($path . '/mini/') && (!mkdir($concurrentDirectory = $path . '/mini/', 0o755, true)
+            && !is_dir($concurrentDirectory))) {
+            throw new RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
         }

         imagewebp($resized_picture, $path . '/mini/' . $width . 'x' . $height . '-' . $file);
    ----------- end diff -----------

Applied rules:
 * CombineIfRector


30) src/Controller/Auth/VerificationController.php:24

    ---------- begin diff ----------
@@ @@
         EntityManagerInterface $entityManager
     ): Response {
         $user = $userRepository->find($request->query->get('id'));
-        if (!$user) {
+        if (!$user instanceof \App\Entity\User) {
             throw $this->createNotFoundException();
         }
         try {
    ----------- end diff -----------

Applied rules:
 * FlipTypeControlToUseExclusiveTypeRector
 * ExplicitBoolCompareRector (https://www.reddit.com/r/PHP/comments/aqk01p/is_there_a_situation_in_which_if_countarray_0/)


31) src/Controller/Auth/RegisterController.php:29

    ---------- begin diff ----------
@@ @@
 {
     private array $settings;
     private MessageBusInterface $messageBus;
-    private RegistrationFormAuthenticator $authenticator;
     private Security $security;
-    private UserAuthenticatorInterface $userAuthenticator;
     private UserService $service;

     public function __construct(
@@ @@
         parent::__construct($settingsRepository, $doctrine);
         $this->settings = $this->site($requestStack->getCurrentRequest());
         $this->messageBus = $messageBus;
-        $this->authenticator = $authenticator;
         $this->security = $security;
-        $this->userAuthenticator = $userAuthenticator;
         $this->service = $service;
     }

     /**
-     * @param  Request  $request
-     *
-     * @return Response|null
      * @throws InvalidArgumentException
      */
     #[Route(path: '/register', name: 'auth_register', methods: ['GET','POST'])]
@@ @@
             'title' => 'title.register',
             'site' => $this->settings,
             'error' => null,
-            'form' => $form->createView(),
+            'form' => $form,
         ]);
     }

@@ @@
                 'title' => 'title.request_new_verification_email',
                 'site' => $this->settings,
                 'error' => $error,
-                'form' => $form->createView(),
+                'form' => $form,
             ]
         );
     }

-    private function authenticate(User $user, Request $request): ?Response
-    {
-        return $this->userAuthenticator->authenticateUser(
-            $user,
-            $this->authenticator,
-            $request
-        );
-    }
-
     /**
      * After create account to redirect chooseplan page.
      */
     #[Route(path: '/dealer/choosePlan/{id}', name: 'dealer_choose_plan', methods: ['GET', 'POST'])]
-    public function choosePlan(Request $request, SubscriptionRepository $subscriptionRepository, $id)
+    public function choosePlan(Request $request, SubscriptionRepository $subscriptionRepository, $id): \Symfony\Component\HttpFoundation\Response
     {
         // Get pages
         $subscriptions = $subscriptionRepository->findAll();
    ----------- end diff -----------

Applied rules:
 * RemoveUnusedPrivateMethodRector
 * RemoveUselessParamTagRector
 * RemoveUselessReturnTagRector
 * RemoveUnusedPrivatePropertyRector
 * RenameClassRector
 * ResponseReturnTypeControllerActionRector
 * SimplifyFormRenderingRector


32) src/Controller/Auth/PasswordResetController.php:47

    ---------- begin diff ----------
@@ @@
             'title' => 'title.forgot_password',
             'site' => $this->site($request),
             'link' => 'auth_password_reset',
-            'form' => $form->createView(),
+            'form' => $form,
         ]);
     }

@@ @@
         return $this->render('auth/password/change_password.html.twig', [
             'title' => 'title.change_password',
             'site' => $this->site($request),
-            'form' => $form->createView(),
+            'form' => $form,
         ]);
     }

@@ @@

         // check to see if user is logged in
         $user = $this->getUser();
-        if (!$user) {
+        if (!$user instanceof \Symfony\Component\Security\Core\User\UserInterface) {
             return $this->redirectToRoute('security_login');
         }

@@ @@
             'title' => 'title.change_password',
             'action_cancel_url' => 'app_dash',
             'site' => $this->site($request),
-            'form' => $form->createView(),
+            'form' => $form,
         ]);
     }
    ----------- end diff -----------

Applied rules:
 * FlipTypeControlToUseExclusiveTypeRector
 * ExplicitBoolCompareRector (https://www.reddit.com/r/PHP/comments/aqk01p/is_there_a_situation_in_which_if_countarray_0/)
 * SimplifyFormRenderingRector


33) src/Controller/Auth/LoginController.php:52

    ---------- begin diff ----------
@@ @@
             'title' => 'title.login',
             'site' => $this->site($request),
             'error' => $helper->getLastAuthenticationError(),
-            'form' => $form->createView(),
+            'form' => $form,
         ]);
     }
    ----------- end diff -----------

Applied rules:
 * SimplifyFormRenderingRector


34) src/Controller/Auth/EmailConfirmationAndResetPasswordController.php:47

    ---------- begin diff ----------
@@ @@
             'title' => 'title.forgot_password',
             'site' => $this->site($request),
             'link' => 'auth_password_reset',
-            'form' => $form->createView(),
+            'form' => $form,
         ]);
     }

@@ @@
         return $this->render('auth/password/change_password.html.twig', [
             'title' => 'title.change_password',
             'site' => $this->site($request),
-            'form' => $form->createView(),
+            'form' => $form,
         ]);
     }

@@ @@

         // check to see if user is logged in
         $user = $this->getUser();
-        if (!$user) {
+        if (!$user instanceof \Symfony\Component\Security\Core\User\UserInterface) {
             return $this->redirectToRoute('security_login');
         }

@@ @@
             'title' => 'title.change_password',
             'action_cancel_url' => 'app_dash',
             'site' => $this->site($request),
-            'form' => $form->createView(),
+            'form' => $form,
         ]);
     }
    ----------- end diff -----------

Applied rules:
 * FlipTypeControlToUseExclusiveTypeRector
 * ExplicitBoolCompareRector (https://www.reddit.com/r/PHP/comments/aqk01p/is_there_a_situation_in_which_if_countarray_0/)
 * SimplifyFormRenderingRector


35) src/Controller/Admin/ProductController.php:34

    ---------- begin diff ----------
@@ @@
     }

     /**
-     * @param  Request         $request
-     * @param  ProductService  $productService
      *
-     * @return Response
      * @throws InvalidArgumentException
      */
     #[Route('/admin/product/new', name: 'admin_product_new')]
@@ @@
             'cancel_url' => 'admin_product',
             'site' => $this->site($request),
             'product' => $product,
-            'form' => $form->createView(),
+            'form' => $form,
         ]);
     }

@@ @@
             'title' => 'title.products',
             'cancel_url' => 'admin_product',
             'site' => $this->site($request),
-            'form' => $form->createView(),
+            'form' => $form,
         ]);
     }

     /**
-     * @param  Request         $request
-     * @param  Product         $product
-     * @param  ProductService  $productService
      *
-     * @return Response
      * @throws InvalidArgumentException
      */
     #[Route(path: '/admin/product/{id<\d+>}/delete', name: 'admin_product_delete', methods: ['GET', 'POST'])]
    ----------- end diff -----------

Applied rules:
 * RemoveUselessParamTagRector
 * RemoveUselessReturnTagRector
 * RenameClassRector
 * SimplifyFormRenderingRector


36) src/Controller/AbstractImageController.php:29

    ---------- begin diff ----------
@@ @@


     /**
-     * @param  Product       $product
-     * @param  Request       $request
-     * @param  FileUploader  $fileUploader
      *
-     * @return JsonResponse
      * @throws Exception
      */
     protected function uploadImage(Product $product, Request $request, FileUploader $fileUploader): JsonResponse
@@ @@
             $violation = $violations[0];
             $this->addFlash('danger', $violation->getMessage());

-            return new JsonResponse(['status' => 'fail'], 422);
+            return new JsonResponse(['status' => 'fail'], \Symfony\Component\HttpFoundation\Response::HTTP_UNPROCESSABLE_ENTITY);
         }

         $fileName = $fileUploader->upload($uploadedFile);
@@ @@
         return new JsonResponse(['status' => 'ok']);
     }

-    /**
-     * @param  Request  $request
-     *
-     * @return JsonResponse
-     */
     protected function sortImages(
         Request $request,
     ): JsonResponse {
    ----------- end diff -----------

Applied rules:
 * RemoveUselessParamTagRector
 * RemoveUselessReturnTagRector
 * RenameClassRector
 * ResponseStatusCodeRector


37) src/Command/LoadProductAccountCommand.php:35

    ---------- begin diff ----------
@@ @@
     /**
      * execute
      *
-     * @param  InputInterface   $input
-     * @param  OutputInterface  $output
      *
-     * @return int
      */
     protected function execute(InputInterface $input, OutputInterface $output): int
     {
    ----------- end diff -----------

Applied rules:
 * RemoveUselessParamTagRector
 * RemoveUselessReturnTagRector
 * RenameClassRector


38) src/Command/LoadMakeModelCommand.php:33

    ---------- begin diff ----------
@@ @@
     /**
      * execute
      *
-     * @param  InputInterface   $input
-     * @param  OutputInterface  $output
      *
-     * @return int
      * @throws Exception
      */
     protected function execute(InputInterface $input, OutputInterface $output): int
    ----------- end diff -----------

Applied rules:
 * RemoveUselessParamTagRector
 * RemoveUselessReturnTagRector
 * RenameClassRector


39) src/Command/LoadCategoryCommand.php:32

    ---------- begin diff ----------
@@ @@
     /**
      * execute
      *
-     * @param  InputInterface   $input
-     * @param  OutputInterface  $output
      *
-     * @return int
      * @throws Exception
      */
     protected function execute(InputInterface $input, OutputInterface $output): int
    ----------- end diff -----------

Applied rules:
 * RemoveUselessParamTagRector
 * RemoveUselessReturnTagRector
 * RenameClassRector


40) src/Command/LoadCSVCommand.php:34

    ---------- begin diff ----------
@@ @@
     /**
      * execute
      *
-     * @param  InputInterface   $input
-     * @param  OutputInterface  $output
      *
-     * @return int
      */
     protected function execute(InputInterface $input, OutputInterface $output): int
     {
    ----------- end diff -----------

Applied rules:
 * RemoveUselessParamTagRector
 * RemoveUselessReturnTagRector
 * RenameClassRector


41) src/Command/ListUsersCommand.php:27

    ---------- begin diff ----------
@@ @@
         $this->users = $users;
     }

-    /**
-     * @return void
-     */
     protected function configure(): void
     {
         $this->addOption(
@@ @@
     /**
      * execute
      *
-     * @param  InputInterface   $input
-     * @param  OutputInterface  $output
      *
-     * @return int
      */
     protected function execute(InputInterface $input, OutputInterface $output): int
     {
    ----------- end diff -----------

Applied rules:
 * RemoveUselessParamTagRector
 * RemoveUselessReturnTagRector
 * RenameClassRector


42) src/Command/InstallCommand.php:20

    ---------- begin diff ----------
@@ @@
     /**
      * execute
      *
-     * @param  InputInterface   $input
-     * @param  OutputInterface  $output
      *
-     * @return int
      * @throws ExceptionInterface
      */
     protected function execute(InputInterface $input, OutputInterface $output): int
    ----------- end diff -----------

Applied rules:
 * RemoveUselessParamTagRector
 * RemoveUselessReturnTagRector
 * RenameClassRector


43) src/Command/DevCommand.php:20

    ---------- begin diff ----------
@@ @@
     /**
      * execute
      *
-     * @param  InputInterface   $input
-     * @param  OutputInterface  $output
      *
-     * @return int
      * @throws ExceptionInterface
      */
     protected function execute(InputInterface $input, OutputInterface $output): int
    ----------- end diff -----------

Applied rules:
 * RemoveUselessParamTagRector
 * RemoveUselessReturnTagRector
 * RenameClassRector


44) src/Command/DbCommand.php:20

    ---------- begin diff ----------
@@ @@
     /**
      * execute
      *
-     * @param  InputInterface   $input
-     * @param  OutputInterface  $output
      *
-     * @return int
      * @throws ExceptionInterface
      */
     protected function execute(InputInterface $input, OutputInterface $output): int
    ----------- end diff -----------

Applied rules:
 * RemoveUselessParamTagRector
 * RemoveUselessReturnTagRector
 * RenameClassRector


45) src/Command/CreateCategoryCommand.php:37

    ---------- begin diff ----------
@@ @@
     /**
      * execute
      *
-     * @param  InputInterface   $input
-     * @param  OutputInterface  $output
      *
-     * @return int
      */
     protected function execute(InputInterface $input, OutputInterface $output): int
     {
@@ @@
      * loadModules
      *
      * @param $name
-     *
-     * @return void
      */
     private function loadModels($name): void
     {
    ----------- end diff -----------

Applied rules:
 * RemoveUselessParamTagRector
 * RemoveUselessReturnTagRector
 * RenameClassRector


46) src/DataFixtures/CategoryFixturesNew.php:11

    ---------- begin diff ----------
@@ @@
 // class CategoryFixtures extends Fixture implements DependentFixtureInterface
 class CategoryFixturesNew extends Fixture
 {
-    private int $counter = 1;
-
     public function __construct(private ParameterBagInterface $params)
     {
         $this->params = $params;
@@ @@
 //        dd('here');

         // data = [$parent, $name, $slug]
-    }
-
-    private function createCategory(string $name, $slug, $manager, Category $parent = null): Category
-    {
-        $category = new Category();
-        $category->setParent($parent);
-        $category->setName($name);
-        $category->setSlug($slug);
-//        $this->createCategory('mouse', $manager, $parent);
-
-        $this->addReference('category-' . $this->counter, $category);
-        ++$this->counter;
-
-        $manager->persist($category);
-
-        return $category;
-    }
-
-    private function getData(): array
-    {
-        $path = $this->params->get('kernel.project_dir');
-        $file_category = $path . '/data/category.csv';
-
-//        $csv = str_getcsv(file_get_contents($file_category));
-
-        $csv = [];
-        $file = fopen($file_category, 'rb');
-
-        while (($result = fgetcsv($file)) !== false) {
-            $csv[] = $result;
-        }
-
-        fclose($file);
-
-//        echo '<pre>';
-//        print_r($csv);
-//        echo '</pre>';
-
-//        return [
-//            [1, 'Account One - Primary User 2', 2],
-//            [1, 'Account Two - Primary User 3', 3],
-//        ];
-
-        return $csv;
     }
 }
    ----------- end diff -----------

Applied rules:
 * RemoveUnusedPrivateMethodRector
 * RemoveUnusedPrivatePropertyRector


47) src/Controller/User/SubscriptionController.php:34

    ---------- begin diff ----------
@@ @@
 final class SubscriptionController extends BaseController
 {
     private RequestStack $requestStack;
-    private SettingsRepository $settingsRepository;
-    private SubscriptionRepository $subscriptionRepository;
     private StripeService $stripeService;


@@ @@
     ) {
         parent::__construct($settingsRepository, $registry);
         $this->requestStack = $requestStack;
-        $this->settingsRepository = $settingsRepository;
-        $this->subscriptionRepository = $subscriptionRepository;
         $this->stripeService = $stripeService;

     }
@@ @@
         Request $request,
         SubscriptionRepository $subscriptionRepository,
         EntityManagerInterface $em
-        ) {
+        ): \Symfony\Component\HttpFoundation\RedirectResponse {

         $this->denyAccessUnlessGranted('IS_AUTHENTICATED_REMEMBERED');
         $session = $this->requestStack->getSession();
@@ @@
                 $this->stripeService->stripeAddSubscriptionToCustomer($stripeCustomerId,$this->getUser());                
             }
             $session->set('stripe-session-id', $stripeSession->id);
-            return $this->redirect($stripeSession->url, 303);
+            return $this->redirect($stripeSession->url, \Symfony\Component\HttpFoundation\Response::HTTP_SEE_OTHER);
         }

         $user = $this->getUser();
@@ @@

         $basicPlan = $subscriptionRepository->findOneBy(['price' => 0]);
         $freeTrialTime = explode(' ', $basicPlan->getValidUntil());
-        $timeExpolode = $freeTrialTime[0];

         $user->setSubscription($basicPlan);
         $user->setSubscriptionValidUntil((new \DateTime())->modify('+7 day'));
@@ @@


     #[Route('/subscribes/{priceId}/userId/{id}', name: 'checkouts')]
-    public function subscribes(Request $request, EmailVerifierAndResetPasswordDealerService $service, SubscriptionRepository $sr, EntityManagerInterface $em, UserRepository $userrepository, $id)
+    public function subscribes(Request $request, EmailVerifierAndResetPasswordDealerService $service, SubscriptionRepository $sr, EntityManagerInterface $em, UserRepository $userrepository, $id): \Symfony\Component\HttpFoundation\RedirectResponse
     {       
         $session = $this->requestStack->getSession();
         $priceId = $request->attributes->get('priceId');
@@ @@
             }

             $session->set('stripe-session-id', $stripeSession->id);
-            return $this->redirect($stripeSession->url, 303);
+            return $this->redirect($stripeSession->url, \Symfony\Component\HttpFoundation\Response::HTTP_SEE_OTHER);
         }

         $user = $userData;
@@ @@

         $basicPlan = $sr->findOneBy(['price' => 0]);
         $freeTrialTime = explode(' ', $basicPlan->getValidUntil());
-        $timeExpolode = $freeTrialTime[0];

         $user->setSubscription($basicPlan);
         $user->setSubscriptionValidUntil((new \DateTime())->modify('+7 day'));
@@ @@
             'site' => $this->site($request),
             'title' => 'title.payment-success',
         ]);
-
-        return $this->render('user/stripe/cancel.html.twig', []);
     }

     #[Route('/cancel/{user}/{plan}', name: 'cancel_plan')]
-    public function cancelPlan(Request $request, User $user, $stripeAPI): Response
+    public function cancelPlan(User $user, $stripeAPI): Response
     {
         if ($user->getStripeSubscriptionId()) {
             $str_sub_id = $user->getStripeSubscriptionId();
    ----------- end diff -----------

Applied rules:
 * RemoveUnusedVariableAssignRector
 * RemoveUnusedPrivatePropertyRector
 * RemoveUnreachableStatementRector
 * ResponseStatusCodeRector
 * RemoveUnusedRequestParamRector
 * ResponseReturnTypeControllerActionRector


48) src/Controller/User/ProfileController.php:59

    ---------- begin diff ----------
@@ @@
             'action_cancel_url' => 'user_profile',
             'site' => $this->site($request),
             'error' => $error,
-            'form' => $form->createView(),
+            'form' => $form,
             'profile' => $profile,
         ]);
     }
    ----------- end diff -----------

Applied rules:
 * SimplifyFormRenderingRector


49) src/Controller/User/ProductController.php:38

    ---------- begin diff ----------
@@ @@
 {
     public AbstractImageController $abstractImageController;

-    /**
-     * @param  Request                    $request
-     * @param  FilterRepository           $repository
-     * @param  RequestToArrayTransformer  $transformer
-     *
-     * @return Response
-     */
     #[Route(path: '/user/products', name: 'user_products', defaults: ['page' => 1], methods: ['GET'])]
     public function index(
         Request $request,
@@ @@


     /**
-     * @param  Request         $request
-     * @param  ProductService  $service
      *
-     * @return Response
      * @throws InvalidArgumentException
      */
     #[Route(path: '/user/product/new', name: 'user_product_new')]
@@ @@
                 $model = $request->request->get('model');
                 $exists = $makeModelRepository->findBy(array('year' => $year, 'make' => $make, 'model' => $model));
                 $requestTrim = $request->request->all('trim');
-                if(!count($exists) > 0)
+                if(($exists === []) > 0)
                 {
                     $makeModel = new MakeModel();
                     $makeModel->setYear($year);
@@ @@

                 $arrResponseData = json_decode(base64_decode($request->request->get('responseData')),true);

-                foreach($requestTrim as $key => $value)
+                foreach($requestTrim as $value)
                 {
                     $founKey = array_search($value, array_column($arrResponseData['trims'], 'name'));
                     if($founKey !== false)
@@ @@
                         'Authorization' => 'Bearer ' . $token,
                     ],
                 ]);
-                if(!empty($responseData))
-                {
-                    $arrResponseData = $responseData->toArray();
-                    $productDetails = new ProductDetails();
-                    $formData = $this->createForm(ProductCustomType::class, $productDetails);
-                    $formData->handleRequest($request);
-                    $makes = $makeModelRepository->findAllUniqueMake();
-                    $years = $makeModelRepository->findAllUniqueYear();
-                    $models = $makeModelRepository->findAllUniqueModel($arrResponseData['make']);
-                    $trim = explode(", ", $arrResponseData['trim']);
-                    return $this->render('user/product/new.html.twig', [
-                        'title' => 'title.products',
-                        'site' => $this->site($request),
-                        'product_response' => $arrResponseData,
-                        'product_response_data' => base64_encode(json_encode($responseData->toArray())),
-                        'vehical_identification_number' => $product->getvin(),
-                        'form' => $formData,
-                        'makes' => $makes,
-                        'models' => $models,
-                        'years' => $years,
-                        'trim' => $trim,
-                        'page_type' => 'description_page',
-                        'product_id' => $lastInsertedId,
-                    ]);
-                }
+                $arrResponseData = $responseData->toArray();
+                $productDetails = new ProductDetails();
+                $formData = $this->createForm(ProductCustomType::class, $productDetails);
+                $formData->handleRequest($request);
+                $makes = $makeModelRepository->findAllUniqueMake();
+                $years = $makeModelRepository->findAllUniqueYear();
+                $models = $makeModelRepository->findAllUniqueModel($arrResponseData['make']);
+                $trim = explode(", ", $arrResponseData['trim']);
+                return $this->render('user/product/new.html.twig', [
+                    'title' => 'title.products',
+                    'site' => $this->site($request),
+                    'product_response' => $arrResponseData,
+                    'product_response_data' => base64_encode(json_encode($responseData->toArray())),
+                    'vehical_identification_number' => $product->getvin(),
+                    'form' => $formData,
+                    'makes' => $makes,
+                    'models' => $models,
+                    'years' => $years,
+                    'trim' => $trim,
+                    'page_type' => 'description_page',
+                    'product_id' => $lastInsertedId,
+                ]);
             }
         }
         else
@@ @@
             return $this->render('user/product/new.html.twig', [
                 'title' => 'title.products',
                 'site' => $this->site($request),
-                'form' => $form->createView(),
+                'form' => $form,
                 'vehical_identification_number' => '',
                 'makes' => array(),
                 'product_response' => array(),
@@ @@
         }
     }

-    /**
-     * @param  Request         $request
-     * @param  Product         $product
-     * @param  ProductService  $service
-     *
-     * @return Response
-     */
     #[Route(path: '/user/product/{id<\d+>}/edit', name: 'user_product_edit', methods: ['GET', 'POST'])]
     public function edit(Request $request, Product $product, ProductService $service, AccountRepository $accountRepository, MakeModelRepository $makeModelRepository, FileUploader $fileUploader): Response
     {
@@ @@
             'title' => 'title.products',
             'site' => $this->site($request),
             'cancel_url' => 'user_products',
-            'form' => $form->createView(),
+            'form' => $form,
             'product' => $product,
             'makes' => $makes,
             'years'=> $years,
@@ @@


     /**
-     * @param  Request         $request
-     * @param  Product         $product
-     * @param  ProductService  $service
      *
-     * @return Response
      * @throws InvalidArgumentException
      */
     #[Route(path: '/product/{id<\d+>}/delete', name: 'user_product_delete', methods: ['POST'])]
@@ @@

         $arrMakes = $makeModelRepository->findAllMakeUsingYear($yearId);
         $options = '<option value>Select Make</option>';
-        foreach($arrMakes as $key => $value)
+        foreach($arrMakes as $value)
         {
             $options .= '<option value="'.$value["make"].'">'.$value["make"].'</option>';
         }
@@ @@

         $arrModels = $makeModelRepository->findAllModelUsingYearAndMake($yearId, $makeId);
         $options = '<option value>Select Model</option>';
-        foreach($arrModels as $key => $value)
+        foreach($arrModels as $value)
         {
             $options .= '<option value="'.$value["model"].'">'.$value["model"].'</option>';
         }
@@ @@
         }
     }

-    function base64url_encode($str) {
+    function base64url_encode($str): string {
         return rtrim(strtr(base64_encode($str), '+/', '-_'), '=');
     }
    ----------- end diff -----------

Applied rules:
 * ReturnTypeFromStrictScalarReturnExprRector
 * CountArrayToEmptyArrayComparisonRector
 * RemoveUselessParamTagRector
 * RemoveUselessReturnTagRector
 * RemoveUnusedForeachKeyRector
 * RemoveAlwaysTrueIfConditionRector
 * RenameClassRector
 * SimplifyFormRenderingRector


50) src/Controller/User/ImageController.php:14

    ---------- begin diff ----------
@@ @@
 final class ImageController extends BaseController
 {

-    /**
-     * @param  Request  $request
-     * @param  Product  $product
-     *
-     * @return Response
-     */
     #[Route(path: '/user/image/{id<\d+>}/edit', name: 'user_image_edit')]
     public function edit(Request $request, Product $product): Response
     {
    ----------- end diff -----------

Applied rules:
 * RemoveUselessParamTagRector
 * RemoveUselessReturnTagRector
 * RenameClassRector


51) src/Controller/User/Ajax/ProductController.php:16

    ---------- begin diff ----------
@@ @@
 final class ProductController extends AbstractController implements AjaxController
 {

-    /**
-     * @param  Request                $request
-     * @param  Product                $product
-     * @param  UserProductRepository  $repository
-     *
-     * @return JsonResponse
-     */
     #[Route(path: '/user/product/{id<\d+>}/update', name: 'user_product_update', methods: ['GET'])]
     public function update(Request $request, Product $product, UserProductRepository $repository): JsonResponse
     {
@@ @@
         $state = $request->query->get('state');

         if (!in_array($state, ['published', 'private'], true)) {
-            return new JsonResponse(['status' => 'fail'], 422);
+            return new JsonResponse(['status' => 'fail'], \Symfony\Component\HttpFoundation\Response::HTTP_UNPROCESSABLE_ENTITY);
         }

         if ($repository->changeState($product, $state)) {
@@ @@
             return new JsonResponse(['status' => 'ok']);
         }

-        return new JsonResponse(['status' => 'fail'], 500);
+        return new JsonResponse(['status' => 'fail'], \Symfony\Component\HttpFoundation\Response::HTTP_INTERNAL_SERVER_ERROR);
     }
 }
    ----------- end diff -----------

Applied rules:
 * RemoveUselessParamTagRector
 * RemoveUselessReturnTagRector
 * RenameClassRector
 * ResponseStatusCodeRector


52) src/Controller/User/Ajax/PasswordController.php:23

    ---------- begin diff ----------
@@ @@
         } catch (Throwable $e) {
             return new JsonResponse([
                 'message' => $e->getMessage(),
-            ], 422);
+            ], \Symfony\Component\HttpFoundation\Response::HTTP_UNPROCESSABLE_ENTITY);
         }
     }
 }
    ----------- end diff -----------

Applied rules:
 * ResponseStatusCodeRector


53) src/Controller/User/Ajax/ImageController.php:16

    ---------- begin diff ----------
@@ @@
 {

     /**
-     * @param  Product       $product
-     * @param  Request       $request
-     * @param  FileUploader  $fileUploader
      *
-     * @return JsonResponse
      * @throws Exception
      */
     #[Route(path: '/user/image/{id<\d+>}/upload', name: 'user_image_upload', methods: ['POST'])]
@@ @@
         return $this->uploadImage($product, $request, $fileUploader);
     }

-    /**
-     * @param  Request  $request
-     *
-     * @return JsonResponse
-     */
     #[Route(path: '/user/image/{id<\d+>}/sort', name: 'user_image_sort', methods: ['POST'])]
     public function sort(Request $request): JsonResponse
     {
    ----------- end diff -----------

Applied rules:
 * RemoveUselessParamTagRector
 * RemoveUselessReturnTagRector
 * RenameClassRector


54) src/Controller/ThreadController.php:35

    ---------- begin diff ----------
@@ @@
             $products = $productRepository->findAllThreadsByAccount($accountID);

             return $this->render('thread/index.html.twig', [
-                'title' => (!empty($account->getAccount()->getName())) ? $account->getAccount()->getName() : '',
+                'title' => (empty($account->getAccount()->getName())) ? '' : $account->getAccount()->getName(),
                 'site' => $this->site($request),
                 'products' => $products,
             ]);
@@ @@

         return $this->render('thread/new.html.twig', [
             'thread' => $thread,
-            'form' => $form->createView(),
+            'form' => $form,
         ]);
     }

@@ @@

         return $this->render('thread/edit.html.twig', [
             'thread' => $thread,
-            'form' => $form->createView(),
+            'form' => $form,
         ]);
     }
    ----------- end diff -----------

Applied rules:
 * SwitchNegatedTernaryRector
 * SimplifyFormRenderingRector


55) src/Controller/ProductController.php:37

    ---------- begin diff ----------
@@ @@
             $searchParams["category"] = $selectedModels;
         } else {
             $modelIds = [];
-            foreach ($subCategories as $key => $value) {
+            foreach ($subCategories as $value) {
 //                array_push($modelIds, $value->getId());
                 $modelIds[] = $value->getId();
             }
    ----------- end diff -----------

Applied rules:
 * RemoveUnusedForeachKeyRector


56) src/Controller/MessageController.php:63

    ---------- begin diff ----------
@@ @@
             'thread' => $thread,
             'action_cancel_url' => 'app_message_show_thread',
             'site' => $this->site($request),
-            'form' => $form->createView(),
+            'form' => $form,
         ]);
     }

@@ @@
             'action_cancel_url' => 'app_message_show_thread',
             'action_delete_url' => true,
             'site' => $this->site($request),
-            'form' => $form->createView(),
+            'form' => $form,
         ]);
     }
    ----------- end diff -----------

Applied rules:
 * SimplifyFormRenderingRector


57) src/Controller/MainController.php:27

    ---------- begin diff ----------
@@ @@
 class MainController extends AbstractController
 {

+    public $params;
     public function __construct(
 //        private HttpClientInterface $githubContentClient,
         private HttpClientInterface $carApiClient,
-        private CacheInterface $cache,
         ParameterBagInterface $params,
     ) {
         $this->params = $params;
@@ @@


     /**
-     * @param  HttpClientInterface  $carApiClient
-     * @param  CacheInterface       $cache
      *
-     * @return Response
      * @throws ClientExceptionInterface
      * @throws DecodingExceptionInterface
      * @throws RedirectionExceptionInterface
@@ @@
     /**
      * @param $cache
      *
-     * @return string
      * @throws ClientExceptionInterface
      * @throws RedirectionExceptionInterface
      * @throws ServerExceptionInterface
@@ @@
     }

     /**
-     * @return string
      * @throws ClientExceptionInterface
      * @throws RedirectionExceptionInterface
      * @throws ServerExceptionInterface
    ----------- end diff -----------

Applied rules:
 * CompleteDynamicPropertiesRector (https://3v4l.org/GL6II)
 * RemoveUnusedPromotedPropertyRector
 * RemoveUselessParamTagRector
 * RemoveUselessReturnTagRector
 * RenameClassRector


58) src/Controller/DashController.php:14

    ---------- begin diff ----------
@@ @@
 class DashController extends BaseController
 {

-    private EntityManagerInterface $entityManager;
-
     #[Route('/', name: 'app_dash')]
     public function index(
         Request $request,
@@ @@
         MessageRepository $messageRepository
 ): Response
     {
-        $this->entityManager = $entityManager;
         $user = $security->getUser();
         return $this->render('dash/index.html.twig', [
             'title' => 'title.dashboard',
    ----------- end diff -----------

Applied rules:
 * RemoveUnusedPrivatePropertyRector


 [OK] 58 files would have changed (dry-run) by Rector                                                                   

